#pragma kernel Reduce

#pragma multi_compile_local _ TEXTURE_MODE

#ifdef TEXTURE_MODE
    Texture2D<float4> InputTexture;
#else
    StructuredBuffer<float2> InputBuffer;
#endif

RWStructuredBuffer<float2> OutputBuffer;

#define GROUP_SIZE 1024
groupshared float2 temp[GROUP_SIZE];

[numthreads(GROUP_SIZE, 1, 1)] 
void Reduce(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    uint idx = id.x;
    float2 val = float2(0, 0);
#if TEXTURE_MODE
    uint width, height;
    InputTexture.GetDimensions(width, height);
    if (idx < width * height)
    {
        uint2 uv = uint2(idx % width, idx / width);
        float4 textureVal = InputTexture[uv];
        val = textureVal.a > 0.0f ? float2(textureVal.r > 0.5f ? textureVal.r : 0, 1) : float2(0, 0);
    }
#else
    if (idx < InputBuffer.Length)
        val = InputBuffer[idx];
#endif
    
    temp[groupThreadID.x] = val;
    GroupMemoryBarrierWithGroupSync();

    for (uint s = GROUP_SIZE / 2; s > 0; s >>= 1)
    {
        if (groupThreadID.x < s)
            temp[groupThreadID.x] += temp[groupThreadID.x + s];
        GroupMemoryBarrierWithGroupSync();
    }

    if (groupThreadID.x == 0)
        OutputBuffer[groupID.x] = temp[0];
}
